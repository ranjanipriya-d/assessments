# -*- coding: utf-8 -*-
"""lab2_ia2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gJm0IaDEaMttXPYvqGGoXrAdi2iEKivk
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
df=pd.read_csv("/content/Mall_Customers.csv")
df

df.info()

df.nunique()

df.isnull().sum()

df=df.dropna()

df.isna().sum()

df.info()

df.duplicated().sum()
df.drop_duplicates(inplace=True)
df.head()
df.info()

df=df.drop("CustomerID",axis=1)

df.columns

df['income']=df['Annual Income (k$)']

df['score']=df['Spending Score (1-100)']

df.info()

df=df.drop(['Annual Income (k$)','Spending Score (1-100)'],axis=1)

df.info()

len = LabelEncoder()
for column in df.select_dtypes(include = 'object'):
  df[column] = len.fit_transform(df[column])
df.head()

# from sklearn.preprocessing import MinMaxScaler
# sc = MinMaxScaler()
# for column in df.select_dtypes(include=['float64','int64']):
#   df[column] = sc.fit_transform(df[[column]])

# df.head()

# from sklearn.preprocessing import StandardScaler
# sc = StandardScaler()
# for column in df.select_dtypes(include=['float64','int64']):
#   df[column] = sc.fit_transform(df[[column]])

# df.head()

sse = [] # The sum of Squared Errors =SSE
k_rng = range(1,10)
for k in k_rng:
   km = KMeans(n_clusters=k)
   km.fit(df[['income','score']])
   sse.append(km.inertia_)

plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(k_rng,sse)

km = KMeans(n_clusters=5)
y_predicted = km.fit_predict(df[['income','score']])
y_predicted
df['cluster']=y_predicted
df.head(25)
print(km.cluster_centers_)

df1=df[df.cluster==0]
df2=df[df.cluster==1]
df3=df[df.cluster==2]
df4=df[df.cluster==3]
df5=df[df.cluster==4]
plt.scatter(df1.income,df1['score'],color='green')
plt.scatter(df2.income,df2['score'],color='red')
plt.scatter(df3.income,df3['score'],color='black')
plt.scatter(df4.income,df4['score'],color='blue')
plt.scatter(df5.income,df5['score'],color='yellow')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()

silhouette_score(df, y_predicted)







































