# -*- coding: utf-8 -*-
"""lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o8XzwFWqTWF-WxpkiV_ebufLyOyYn0is
"""

import pandas as pd
data = pd.read_csv('/content/booking.csv')
data.head()

data.columns.nunique()

data = data.drop('Booking_ID', axis=1)
data.head()
data.shape
data.info()

data.describe()

data.isnull().sum()

data.fillna(0)

data_encoded = pd.get_dummies(data, columns=['date of reservation'],dtype=int)
data_encoded.head()

from sklearn.preprocessing import MinMaxScaler
categorical_columns = [col for col in data.columns if data[col].dtype == 'object']
data_encoded = pd.get_dummies(data, columns=categorical_columns,dtype=int)
data_encoded.head()

data_encoded['booking status'] = data['booking status']
data_encoded['booking status'] = data_encoded['booking status'].map({'Canceled': 1, 'Not_Canceled': 0})

data_encoded = data_encoded.drop(['booking status_Canceled', 'booking status_Not_Canceled'], axis=1)

data_encoded.head()

data_encoded = pd.get_dummies(data, columns=['date of reservation'],dtype=int)
data_encoded.head()

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, precision_recall_fscore_support, precision_recall_curve
X = data_encoded.drop('booking status', axis=1)
y = data_encoded['booking status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state= 98)

logistic_model = LogisticRegression(max_iter=1000)
logistic_model.fit(X_train, y_train)
y_pred = logistic_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
classification_report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy}\nClassification Report:\n{classification_report}")

from sklearn.metrics import confusion_matrix

# Assuming logistic_model, X_test, and y_test are already defined
y_pred = logistic_model.predict(X_test)

# Compute confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

print("Confusion Matrix:")
print(conf_matrix)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
# Display the confusion matrix
cm_display = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=[0, 1])
cm_display.plot()
plt.show()