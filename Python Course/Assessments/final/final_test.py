# -*- coding: utf-8 -*-
"""final test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15ivqcGyDnj9jTOG4JXpMlsjKHeDJxaCe

#Ques 1 a
"""

#import the data using pd
import pandas as pd
import numpy as np
df=pd.read_csv("/content/Final Dataset - IPL.csv")

"""#Ques 1 b"""

df.info()

df.describe()

df.columns

"""#Ques 2 a"""

df.isnull().sum()

"""#Ques 2 b"""

df.duplicated()
df.drop_duplicates()
df.info()

"""#Ques 3 a"""

df.isnull().sum()

df=df.replace('NaN',0)

df_int = df[df.columns[df.dtypes == np.int64]]
df_int

mean_value = df_int.mean()
print("Mean:", mean_value)
mode_value=df_int.mode()
print("Mode:", mode_value)
median_value = df_int.median
print("Median:", median_value)
stdev_value = df_int.std()
print("Standard Deviation:", stdev_value)
variance_value = df_int.var()
print("Variance:", variance_value)

"""#Ques 4 a"""

import pandas as pd
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.hist(df['first_ings_score'], bins=5, color='lightblue', edgecolor='black')

plt.xlabel('Score')
plt.ylabel('Frequency')
plt.title('First_innings score')

# Showing the plot
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.scatter(df['first_ings_score'],df['second_ings_score'] ,color='blue', alpha=0.9)
plt.title('Score vs Score')
plt.xlabel('First Innings Score')
plt.ylabel('Second Innings Score')
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

counts = df.groupby("match_winner").size()
print(counts)
labels = counts.index.tolist()
counts = counts.tolist()
colors = ['lightcoral', 'lightskyblue']
plt.figure(figsize=(5,5))
plt.pie(counts, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.axis('equal')
plt.title('Distribution of Matches won by all teams')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
plt.hist(df['highscore'], bins=5, color='lightgreen', edgecolor='black')

plt.xlabel('High Score')
plt.ylabel('Frequency')
plt.title('The high score obtained by the best player')

# Showing the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
count=df["match_winner"].value_counts()
plt.bar(count.index,count.values, color='lightblue', edgecolor='black')

plt.xlabel('Match winning team')
plt.ylabel('Frequency')
plt.title('The winning team of the match')

# Showing the plot
plt.tight_layout()
plt.show()

import seaborn as sns

numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numeric_columns].corr()

plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


# Plot the count of content by rating
match_winner = df['match_winner'].value_counts()
plt.figure(figsize=(14,4))
plt.bar(match_winner.index, match_winner.values, color='skyblue')
plt.xlabel('Match_winning_team')
plt.ylabel('Count')
plt.title('Count of Teams by wining the matches')
plt.show()

won_counts = df['match_winner'].value_counts().sort_index()
plt.figure(figsize=(15,6))

won_counts.plot(kind='line', marker='o')

plt.xlabel('Team ')
plt.ylabel('Number of Match')
plt.title('count of wons vs Team')

# Showing the plot
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 8))
sns.violinplot(y='venue', x='match_winner', data=df)
plt.title('Venue vs Match _winner')
plt.xlabel('Winner')
plt.ylabel('Venue')
plt.show()

"""#Ques 6

The outlier detection is not needed for the data as it eliminates the high score in a way where data loss is going to happen. So the outliers need not be removed from this data

#Ques 7
"""

import pandas as pd
import matplotlib.pyplot as plt


# Plot the count of content by rating
match_winner = df['player_of_the_match'].value_counts().head(10)
plt.figure(figsize=(14,4))
plt.bar(match_winner.index, match_winner.values, color='skyblue')
plt.xlabel('Player')
plt.ylabel('Count')
plt.title('Player_of_the_Match')
plt.show()

"""
#Ques 8"""

import pandas as pd
import matplotlib.pyplot as plt

counts = df.groupby("stage").size()
print(counts)

plt.figure(figsize=(14,4))
plt.bar(counts.index, counts.values, color='lightgreen')
plt.xlabel('stage')
plt.ylabel('Count')
plt.title('stage')
plt.xticks(rotation=45)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

counts = df.groupby("venue").size()
print(counts)
# Plot the count of content by rating
#match_winner = df['venue'].value_counts().head(10)
plt.figure(figsize=(14,4))
plt.bar(counts.index, counts.values, color='skyblue')
plt.xlabel('venue')
plt.ylabel('Count')
plt.title('Venue')
plt.xticks(rotation=45)
plt.show()

"""The highest number of matches happened in Wankhede Stadium in Mumbai

#Ques 9

There is no sufficient data for the teams who scored the top_players or the high_score players
so to groupby the team names who scored the highest score or the top_players of the team

As the teams of the best bowlers or the topscorers is not given between the two teams which played, it is difficult to predict the impact of each player based on their bowling or batting skills
Best Bowler can be either from winning or losing team, so its a 50-50 trial here
"""